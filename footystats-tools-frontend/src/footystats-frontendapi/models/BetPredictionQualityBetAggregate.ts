/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BetPredictionQualityBetAggregate
 */
export interface BetPredictionQualityBetAggregate {
    /**
     * 
     * @type {string}
     * @memberof BetPredictionQualityBetAggregate
     */
    bet?: BetPredictionQualityBetAggregateBetEnum;
    /**
     * 
     * @type {number}
     * @memberof BetPredictionQualityBetAggregate
     */
    betSucceeded?: number;
    /**
     * 
     * @type {number}
     * @memberof BetPredictionQualityBetAggregate
     */
    betFailed?: number;
    /**
     * 
     * @type {number}
     * @memberof BetPredictionQualityBetAggregate
     */
    predictionPercent?: number;
}


/**
 * @export
 */
export const BetPredictionQualityBetAggregateBetEnum = {
    OverZeroFive: 'OVER_ZERO_FIVE',
    OverOneFive: 'OVER_ONE_FIVE',
    BttsYes: 'BTTS_YES',
    BttsNo: 'BTTS_NO'
} as const;
export type BetPredictionQualityBetAggregateBetEnum = typeof BetPredictionQualityBetAggregateBetEnum[keyof typeof BetPredictionQualityBetAggregateBetEnum];


/**
 * Check if a given object implements the BetPredictionQualityBetAggregate interface.
 */
export function instanceOfBetPredictionQualityBetAggregate(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BetPredictionQualityBetAggregateFromJSON(json: any): BetPredictionQualityBetAggregate {
    return BetPredictionQualityBetAggregateFromJSONTyped(json, false);
}

export function BetPredictionQualityBetAggregateFromJSONTyped(json: any, ignoreDiscriminator: boolean): BetPredictionQualityBetAggregate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bet': !exists(json, 'bet') ? undefined : json['bet'],
        'betSucceeded': !exists(json, 'betSucceeded') ? undefined : json['betSucceeded'],
        'betFailed': !exists(json, 'betFailed') ? undefined : json['betFailed'],
        'predictionPercent': !exists(json, 'predictionPercent') ? undefined : json['predictionPercent'],
    };
}

export function BetPredictionQualityBetAggregateToJSON(value?: BetPredictionQualityBetAggregate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bet': value.bet,
        'betSucceeded': value.betSucceeded,
        'betFailed': value.betFailed,
        'predictionPercent': value.predictionPercent,
    };
}

