/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BetPredictionQuality } from './BetPredictionQuality';
import {
    BetPredictionQualityFromJSON,
    BetPredictionQualityFromJSONTyped,
    BetPredictionQualityToJSON,
} from './BetPredictionQuality';
import type { PredictionQualityRevision } from './PredictionQualityRevision';
import {
    PredictionQualityRevisionFromJSON,
    PredictionQualityRevisionFromJSONTyped,
    PredictionQualityRevisionToJSON,
} from './PredictionQualityRevision';

/**
 * 
 * @export
 * @interface PredictionQualityReport
 */
export interface PredictionQualityReport {
    /**
     * 
     * @type {PredictionQualityRevision}
     * @memberof PredictionQualityReport
     */
    revision?: PredictionQualityRevision;
    /**
     * 
     * @type {Array<BetPredictionQuality>}
     * @memberof PredictionQualityReport
     */
    measurements?: Array<BetPredictionQuality>;
}

/**
 * Check if a given object implements the PredictionQualityReport interface.
 */
export function instanceOfPredictionQualityReport(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PredictionQualityReportFromJSON(json: any): PredictionQualityReport {
    return PredictionQualityReportFromJSONTyped(json, false);
}

export function PredictionQualityReportFromJSONTyped(json: any, ignoreDiscriminator: boolean): PredictionQualityReport {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'revision': !exists(json, 'revision') ? undefined : PredictionQualityRevisionFromJSON(json['revision']),
        'measurements': !exists(json, 'measurements') ? undefined : ((json['measurements'] as Array<any>).map(BetPredictionQualityFromJSON)),
    };
}

export function PredictionQualityReportToJSON(value?: PredictionQualityReport | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'revision': PredictionQualityRevisionToJSON(value.revision),
        'measurements': value.measurements === undefined ? undefined : ((value.measurements as Array<any>).map(BetPredictionQualityToJSON)),
    };
}

