/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Precast,
  PredictionQualityReport,
  PredictionQualityRevision,
} from '../models';
import {
    PrecastFromJSON,
    PrecastToJSON,
    PredictionQualityReportFromJSON,
    PredictionQualityReportToJSON,
    PredictionQualityRevisionFromJSON,
    PredictionQualityRevisionToJSON,
} from '../models';

export interface PrecastRequest {
    predictionQualityRevision: PredictionQualityRevision;
}

export interface RecomputeQualityRequest {
    predictionQualityRevision: PredictionQualityRevision;
}

/**
 * 
 */
export class PredictionQualityControllerApi extends runtime.BaseAPI {

    /**
     */
    async computeQualityRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PredictionQualityReport>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/predictionquality/compute`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PredictionQualityReportFromJSON(jsonValue));
    }

    /**
     */
    async computeQuality(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PredictionQualityReport> {
        const response = await this.computeQualityRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async latestReportRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PredictionQualityReport>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/predictionquality/latest/report`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PredictionQualityReportFromJSON(jsonValue));
    }

    /**
     */
    async latestReport(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PredictionQualityReport> {
        const response = await this.latestReportRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async latestRevisionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PredictionQualityRevision>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/predictionquality/latest/revision`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PredictionQualityRevisionFromJSON(jsonValue));
    }

    /**
     */
    async latestRevision(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PredictionQualityRevision> {
        const response = await this.latestRevisionRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async precastRaw(requestParameters: PrecastRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Precast>> {
        if (requestParameters.predictionQualityRevision === null || requestParameters.predictionQualityRevision === undefined) {
            throw new runtime.RequiredError('predictionQualityRevision','Required parameter requestParameters.predictionQualityRevision was null or undefined when calling precast.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/predictionquality/precast`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PredictionQualityRevisionToJSON(requestParameters.predictionQualityRevision),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrecastFromJSON(jsonValue));
    }

    /**
     */
    async precast(requestParameters: PrecastRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Precast> {
        const response = await this.precastRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async recomputeQualityRaw(requestParameters: RecomputeQualityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PredictionQualityReport>> {
        if (requestParameters.predictionQualityRevision === null || requestParameters.predictionQualityRevision === undefined) {
            throw new runtime.RequiredError('predictionQualityRevision','Required parameter requestParameters.predictionQualityRevision was null or undefined when calling recomputeQuality.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/predictionquality/recompute`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PredictionQualityRevisionToJSON(requestParameters.predictionQualityRevision),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PredictionQualityReportFromJSON(jsonValue));
    }

    /**
     */
    async recomputeQuality(requestParameters: RecomputeQualityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PredictionQualityReport> {
        const response = await this.recomputeQualityRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
